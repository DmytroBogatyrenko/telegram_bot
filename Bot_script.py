import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, BotCommand
from config import API_TOKEN


API_TOKEN = "8429987254:AAFMrTQ-gZQs7_8OP9_bvQXdC61xK82B3ZQ"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# --- –°–¢–ê–ù–ò –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ ---
class CalcStates(StatesGroup):
    waiting_for_num1 = State()
    waiting_for_num2 = State()
    waiting_for_action = State()

# --- –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫ ---
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü—Ä–∏–≤—ñ—Ç üëã")],
        [KeyboardButton(text="–°–º–∞–π–ª–∏–∫ üòé")],
        [KeyboardButton(text="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")],
        [KeyboardButton(text="–î–æ–ø–æ–º–æ–≥–∞ ‚ùì")]
    ],
    resize_keyboard=True
)

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ ---
async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command="help", description="–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
        BotCommand(command="echo", description="–ü–æ–≤—Ç–æ—Ä—é —Ç–≤–æ—ó —Å–ª–æ–≤–∞"),
        BotCommand(command="count", description="–ü–æ—Ä–∞—Ö—É—é —Å–∏–º–≤–æ–ª–∏"),
        BotCommand(command="smile", description="–ù–∞–¥—ñ—à–ª—é —Å–º–∞–π–ª–∏–∫"),
        BotCommand(command="calculator", description="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"),
    ]
    await bot.set_my_commands(commands)

# /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç üëã!\n"
        "–Ø —Ç–µ—Å—Ç–æ–≤–∏–π –±–æ—Ç ü§ñ\n\n"
        "–í–∏–±–µ—Ä–∏ –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ ‚¨áÔ∏è",
        reply_markup=main_menu
    )

# /help
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/start ‚Äì –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è\n"
        "/help ‚Äì —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/echo ‚Äì –ø–æ–≤—Ç–æ—Ä—é —Ç–≤–æ—ó —Å–ª–æ–≤–∞\n"
        "/count ‚Äì –ø–æ—Ä–∞—Ö—É—é —Å–∏–º–≤–æ–ª–∏\n"
        "/smile ‚Äì –≤—ñ–¥–ø—Ä–∞–≤–ª—é —Å–º–∞–π–ª–∏–∫\n"
        "/calculator ‚Äì –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"
    )

# /echo
@dp.message(Command("echo"))
async def echo_command(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏ –±—É–¥—å-—â–æ, —ñ —è –ø–æ–≤—Ç–æ—Ä—é!")

# /count
@dp.message(Command("count"))
async def count_command(message: types.Message):
    text = message.text.replace("/count", "").strip()
    if text:
        await message.answer(f"–£ —Ç–≤–æ—î–º—É —Ç–µ–∫—Å—Ç—ñ {len(text)} —Å–∏–º–≤–æ–ª—ñ–≤ üìä")
    else:
        await message.answer("–ù–∞–ø–∏—à–∏ —Ç–∞–∫: /count —Ç–≤—ñ–π_—Ç–µ–∫—Å—Ç")

# /smile
@dp.message(Command("smile"))
async def smile_command(message: types.Message):
    await message.answer("üòéüî•‚ú®")

# --- –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä ---
@dp.message(Command("calculator"))
async def calculator_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏ –ø–µ—Ä—à–µ —á–∏—Å–ª–æ:")
    await state.set_state(CalcStates.waiting_for_num1)

@dp.message(CalcStates.waiting_for_num1)
async def calculator_num1(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ ‚ùó")
        return
    await state.update_data(num1=int(message.text))
    await message.answer("–î–æ–±—Ä–µ ‚úÖ –¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –¥—Ä—É–≥–µ —á–∏—Å–ª–æ:")
    await state.set_state(CalcStates.waiting_for_num2)

@dp.message(CalcStates.waiting_for_num2)
async def calculator_num2(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ ‚ùó")
        return
    await state.update_data(num2=int(message.text))
    await message.answer("–Ø–∫—É –¥—ñ—é –≤–∏–∫–æ–Ω–∞—Ç–∏? (+, -, *, /, %)")
    await state.set_state(CalcStates.waiting_for_action)

@dp.message(CalcStates.waiting_for_action)
async def calculator_action(message: types.Message, state: FSMContext):
    data = await state.get_data()
    num1 = data["num1"]
    num2 = data["num2"]
    action = message.text.strip()

    if action == "+":
        result = num1 + num2
    elif action == "-":
        result = num1 - num2
    elif action == "*":
        result = num1 * num2
    elif action == "/":
        if num2 == 0:
            await message.answer("‚ùå –ù–∞ –Ω—É–ª—å –¥—ñ–ª–∏—Ç–∏ –Ω–µ –º–æ–∂–Ω–∞")
            await state.clear()
            return
        result = num1 / num2
    elif action == "%":
        result = num1 % num2
    else:
        await message.answer("–î–æ–∑–≤–æ–ª–µ–Ω—ñ —Ç—ñ–ª—å–∫–∏ –¥—ñ—ó: +, -, *, /, %")
        return

    await message.answer(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {num1} {action} {num2} = {result}")
    await state.clear()

# --- –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –∑ –º–µ–Ω—é ---
@dp.message()
async def handle_text(message: types.Message):
    if message.text == "–ü—Ä–∏–≤—ñ—Ç üëã":
        await message.answer("–ü—Ä–∏–≤—ñ—Ç, —Ä–∞–¥–∏–π —Ç–µ–±–µ –±–∞—á–∏—Ç–∏! üòä")
    elif message.text == "–°–º–∞–π–ª–∏–∫ üòé":
        await message.answer("üî•‚ú®üíØ")
    elif message.text == "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
        await calculator_start(message, dp.fsm.get_context(bot, message.chat.id, message.from_user.id))
    elif message.text == "–î–æ–ø–æ–º–æ–≥–∞ ‚ùì":
        await cmd_help(message)
    else:
        await message.answer(f"–¢–∏ –Ω–∞–ø–∏—Å–∞–≤: {message.text}")

# –∑–∞–ø—É—Å–∫
async def main():
    await set_commands(bot)  # <<< –í–ê–ñ–õ–ò–í–û! –î–æ–¥–∞—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –≤ –º–µ–Ω—é
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
